<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>《Overview of the Mach-O Executable Format》中文翻译</title>
      <link href="/2018/12/12/%E6%A0%B9%E6%8D%AEMach-O%E6%A0%BC%E5%BC%8F%E6%8F%90%E5%8D%87%E4%BB%A3%E7%A0%81%E6%95%88%E7%8E%87/"/>
      <url>/2018/12/12/%E6%A0%B9%E6%8D%AEMach-O%E6%A0%BC%E5%BC%8F%E6%8F%90%E5%8D%87%E4%BB%A3%E7%A0%81%E6%95%88%E7%8E%87/</url>
      <content type="html"><![CDATA[<p><a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/CodeFootprint/Articles/MachOOverview.html#//apple_ref/doc/uid/20001860-BAJGJEJC" target="_blank" rel="noopener">《Overview of the Mach-O Executable Format》</a> 的中文翻译，来自Apple 官方文档《Code Size Performance Guidelines》。本文描述如何根据Mach-O文件格式提升代码执行效率。<strong><em>版权所有，转载须注明出处！</em></strong><br><a id="more"></a></p><h2 id="Overview-of-the-Mach-O-Executable-Format"><a href="#Overview-of-the-Mach-O-Executable-Format" class="headerlink" title="Overview of the Mach-O Executable Format"></a>Overview of the Mach-O Executable Format</h2><p>Mach-O 是 OS X 上 Native 二进制可执行文件格式，是装运代码的首选格式。一个可执行文件格式决定了二进制文件中code和data被读入内存的指令。这些 code、data 指令会影响内存使用、页面寻址，因此直接影响到你的程序运行性能。</p><p>一个Mach-O二进制文件由多个 segment 组成。每个 segment 包含1个或多个 section。code和不同类型的data 分别记录在这些 section 中。segments 是 page 对齐的，而 sections 不保证 page 对齐。segment 的大小由其下所有 section 的 bytes 计算得出，并且最后一个虚拟内存的页面边界向上取整。因此，一个 segment 的 size 总是4096(4k)的整数倍，segment size 最小是 4096 bytes。</p><p>Mach-O的 segment、section 按功能命名。segment命名格式，双下划线+大写字母（比如，__TEXT）；section 命名格式，双下滑线+小写字幕（比如，__text）。</p><p>一个Mach-O文件可能包含多个 segment，但只有2个与性能相关：__TEXT、__DATA。</p><h2 id="The-TEXT-Segment-Read-Only"><a href="#The-TEXT-Segment-Read-Only" class="headerlink" title="The __TEXT Segment: Read Only"></a>The __TEXT Segment: Read Only</h2><p>__TEXT segment 是一个只读区域，包含可执行代码、常量数据。按照规范，编译工具创建每个可执行文件时，至少需要包含一个只读的segment——__TEXT segment。基于此segment的只读性，内核将这部分信息映射到内存只需一次即可。当此 segment 映射到内存后，需要这部分内容的线程可以共享。（主要是frameworks、动态库的情况）。只读性还意味着，组成__TEXT的pages 不会被保存到后台存储。当内核需要释放物理内存时，会释放1个或多个__TEXT的pages，然后在需要时从硬盘上重新读取。</p><p>表1列举了__TEXT中一些常用的sections，完整的 segments 列表见 [Mach-O Runtime Architecture]<br>(<a href="http://math-atlas.sourceforge.net/devel/assembly/MachORuntime.pdf)。" target="_blank" rel="noopener">http://math-atlas.sourceforge.net/devel/assembly/MachORuntime.pdf)。</a></p><table><thead><tr><th>Section</th><th>说明</th></tr></thead><tbody><tr><td>__text</td><td>编译后的机器码</td></tr><tr><td>__const</td><td>全局常量</td></tr><tr><td>__cstring</td><td>字符串常量(代码中引用的)</td></tr><tr><td>__picsymbol_stub</td><td>动态链接器(dyld)使用的无需重定向的代码存根例程</td></tr></tbody></table><h2 id="The-DATA-Segment-Read-Write"><a href="#The-DATA-Segment-Read-Write" class="headerlink" title="The __DATA Segment: Read/Write"></a>The __DATA Segment: Read/Write</h2><p>__DATA segment 包含可执行文件中非常量的数据。此 segment 可读可写。基于可读属性，一个 framework 或动态库为每个连接的线程逻辑拷贝一份。当内存分页可读写时，内核将其标记为 copy-on-write。这项技术会延迟拷贝分页单元，直到某一个动态线程需要写入此分页。此时，内核会给这个线程创建一个私有拷贝分页。</p><p>__DATA segment 包含了很多 sections，有些只给动态链接库使用。表2列举了__DATA中一些常用的 sections，完整的 segments 列表见 [Mach-O Runtime Architecture]<br>(<a href="http://math-atlas.sourceforge.net/devel/assembly/MachORuntime.pdf" target="_blank" rel="noopener">http://math-atlas.sourceforge.net/devel/assembly/MachORuntime.pdf</a>)</p><table><thead><tr><th>Section</th><th>说明</th></tr></thead><tbody><tr><td>__data</td><td>已初始化的全局变量(例，ina a = 1; 或 static int a = 1;)</td></tr><tr><td>__const</td><td>需要重定向的常量数据(例，char * const p = “foo”;)</td></tr><tr><td>__bss</td><td>未初始化的静态变量(例，static int a;)</td></tr><tr><td>__common</td><td>未初始化的外部全局变量(例，int a;外部代码块)</td></tr><tr><td>__dyld</td><td>占位 section，给动态链接库使用</td></tr><tr><td>__la_symbol_ptr</td><td>懒加载符号指针，可执行文件调用的未定义方法的符号指针</td></tr><tr><td>__nl_symbol_ptr</td><td>非懒加载符号指针，可执行文件依赖的未定义方法的符号指针</td></tr></tbody></table><h2 id="Mach-O-Performance-Implications"><a href="#Mach-O-Performance-Implications" class="headerlink" title="Mach-O Performance Implications"></a>Mach-O Performance Implications</h2><p>Mach-O 可执行文件中的__TEXT、__DATA segments 对程序性能有直接影响。每个segment 配置的方法、目标都不一样。但有一点相同：更有效的利用内存。</p><p>大部分典型的 Mach-O 文件包含可执行代码，位与__TEXT,__text section 中。注意到__TEXT是只读的，是直接映射到可执行文件的。因此，如果内核需要回收被__text 占用的物理内存时，不需要保存到后台存储，不需要分页。只需释放内存，待之后再次被引用时，再从硬盘读取。虽然这样操作比内存切换要高效——因为这样只需要读写1次硬盘，比2次少——但这样任然不够高效，当许多分页需要重硬盘读取时会非常明显。</p><p>解决此问题的一种办法是通过程序重新排序提高代码引用定位效率，详见<a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/CodeFootprint/Articles/ImprovingLocality.html#//apple_ref/doc/uid/20001862-CJBJFIDD" target="_blank" rel="noopener">Improving Locality of Reference</a>。这个方法将 methods、funtions聚集在一起重新排序，根据被执行来源、被调用次数、调用频率的顺序。当__text section的分页这样逻辑分布时，绝大多数情况下可以减少调用内存的释放、加载的次数。比如，当你把所有 launch-time 初始化相关的方法放在1、2个分页中，那么初始化完成后这些分页就不必再加载了。</p><p>与__TEXT segment不同，__DATA segment可写，所以__DATA segment不可共享。一个 framework 的非常量全局变量执行时可能会冲突，因为链接到 framework 的各个线程都各自拥有一份这些变量的拷贝。此问题最主要解决的方案，是尽可能这些非常量全局变量声明为常量，从而移入__TEXT,__const section 。<a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/CodeFootprint/Articles/SharedPages.html#//apple_ref/doc/uid/20001863-CJBJFIDD" target="_blank" rel="noopener">Reducing Shared Memory Pages</a>中介绍了此方法以及更多技术方案。对于一个应用来说这通常不是问题，因为一个应用中__DATA的 sections 不会与其他应用共享。</p><p>编译器将__DATA segment 中不同类型的非常量全局数据记录在不同 section 中。这些类型是，未初始化的静态数据、按ANSI C 规范”临时定义”但未声明 extern 的符号。未初始化的静态数据记录在 __DATA,__bss 中。”临时定义”的符号记录在__DATA,__common 中。</p><p>ANSI C 和 C++标准要求系统将未初始化的静态变量置0。（其他类型的未初始化变量保持未初始化状态）。因为未初始化的静态数据、”临时定义”的符号记录在不同 section ，操作系统需要分别处理它们。因为这些变量在不同 sections，大概率分布在不同分页上，所以需要分别切换来切换去，导致你的代码执行变慢。此问题的解决方案，在<a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/CodeFootprint/Articles/SharedPages.html#//apple_ref/doc/uid/20001863-CJBJFIDD" target="_blank" rel="noopener">Reducing Shared Memory Pages</a>中说明的，统一非常量全局数据到__DATA的一个 section 中。</p>]]></content>
      
      <categories>
          
          <category> Mach-O </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Mach-O </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Objective-C闪退类型</title>
      <link href="/2018/09/18/Objective-C%E9%97%AA%E9%80%80%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/09/18/Objective-C%E9%97%AA%E9%80%80%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>iOS的6个闪退类型解释<br><a id="more"></a></p><h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><p>定义于头文件 &lt;signal.h&gt;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIGTERM <span class="comment">/*implementation defined*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIGSEGV <span class="comment">/*implementation defined*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIGINT <span class="comment">/*implementation defined*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIGILL <span class="comment">/*implementation defined*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIGABRT <span class="comment">/*implementation defined*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIGFPE <span class="comment">/*implementation defined*/</span></span></span><br></pre></td></tr></table></figure><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>上面每个宏常量都展开成拥有相异值的整数常量表达式，表示发送给程序的不同信号。</p><table><thead><tr><th>常量</th><th>解释</th></tr></thead><tbody><tr><td>SIGTERM</td><td>发送给程序的终止请求</td></tr><tr><td>SIGSEGV</td><td>非法内存访问（段错误）</td></tr><tr><td>SIGINT</td><td>外部中断，通常为用户所发动</td></tr><tr><td>SIGILL</td><td>非法程序映像，例如非法指令</td></tr><tr><td>SIGABRT</td><td>异常终止条件，例如 abort() 所起始的</td></tr><tr><td>SIGFPE</td><td>错误的算术运算，如除以零</td></tr></tbody></table><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li>C11 standard (ISO/IEC 9899:2011):<ul><li>7.14/3 Signal handling &lt;signal.h&gt; (p: 265)</li></ul></li><li>C99 standard (ISO/IEC 9899:1999):<ul><li>7.14/3 Signal handling &lt;signal.h&gt; (p: 246)</li></ul></li><li>C89/C90 standard (ISO/IEC 9899:1990):<ul><li>4.7 SIGNAL HANDLING &lt;signal.h&gt;</li></ul></li></ul><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p><a href="https://zh.cppreference.com/w/c/program/SIG_types" target="_blank" rel="noopener">cppreference.com</a></p>]]></content>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Crash </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[转]xxx.app已损坏,打不开.你应该将它移到废纸篓</title>
      <link href="/2018/09/17/xxx-app%E5%B7%B2%E6%8D%9F%E5%9D%8F-%E6%89%93%E4%B8%8D%E5%BC%80-%E4%BD%A0%E5%BA%94%E8%AF%A5%E5%B0%86%E5%AE%83%E7%A7%BB%E5%88%B0%E5%BA%9F%E7%BA%B8%E7%AF%93/"/>
      <url>/2018/09/17/xxx-app%E5%B7%B2%E6%8D%9F%E5%9D%8F-%E6%89%93%E4%B8%8D%E5%BC%80-%E4%BD%A0%E5%BA%94%E8%AF%A5%E5%B0%86%E5%AE%83%E7%A7%BB%E5%88%B0%E5%BA%9F%E7%BA%B8%E7%AF%93/</url>
      <content type="html"><![CDATA[<p>Mac OS:’xxx.app已损坏,打不开.你应该将它移到废纸篓’<br><a id="more"></a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>「xxx.app已损坏,打不开.你应该将它移到废纸篓」，并非你安装的软件已损坏，而是Mac系统的安全设置问题，因为这些应用都是破解或者汉化的,那么解决方法就是临时改变Mac系统安全设置。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>出现这个问题的解决方法：<br>修改系统配置：系统偏好设置… -&gt; 安全性与隐私。修改为任何来源<br>如果没有这个选项的话（macOS Sierra 10.12）,打开终端，<br>执行:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo spctl <span class="comment">--master-disable</span></span><br></pre></td></tr></table></figure><p>即可。</p><h2 id="出处"><a href="#出处" class="headerlink" title="出处"></a>出处</h2><p>作者：疏影斜晖<br>链接：<a href="https://www.jianshu.com/p/379b49b88df9" target="_blank" rel="noopener">https://www.jianshu.com/p/379b49b88df9</a><br>來源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>]]></content>
      
      <categories>
          
          <category> Mac OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac OS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/08/28/hello-world/"/>
      <url>/2018/08/28/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>!<br><a id="more"></a><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Objective-C中引入C或C++语言</title>
      <link href="/2018/08/24/Objective-c%E4%B8%AD%E5%BC%95%E5%85%A5C%E6%88%96C-%E8%AF%AD%E8%A8%80/"/>
      <url>/2018/08/24/Objective-c%E4%B8%AD%E5%BC%95%E5%85%A5C%E6%88%96C-%E8%AF%AD%E8%A8%80/</url>
      <content type="html"><![CDATA[<p>Objective-C编程时，C、C++混合编程的处理<br><a id="more"></a></p><h2 id="与-C-语言"><a href="#与-C-语言" class="headerlink" title="与 C 语言"></a>与 C 语言</h2><p>与 C 语言混合编程没有特殊处理，直接编写 C 语言代码，使用 C 函数</p><h2 id="与-C-语言-1"><a href="#与-C-语言-1" class="headerlink" title="与 C++语言"></a>与 C++语言</h2><p>与 C++语言混合编程，需要将.m 文件的后缀改为.mm 文件。头文件后缀不用修改。</p><h2 id="与-C-语言-amp-C-语言"><a href="#与-C-语言-amp-C-语言" class="headerlink" title="与 C 语言&amp; C++语言"></a>与 C 语言&amp; C++语言</h2><p>既有 C 语言，又有 C++语言的混合编程。首先 C++语言需要将文件后缀改为.mm。在.mm 文件中引入外部 C 函数时需要做特殊处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#ifdef __cplusplus</span><br><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line"># 在 .mm文件中引入 C 的头文件，在这里引入，否则 C 的头文件会找不到</span><br><span class="line">    </span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Xcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Objective-C </tag>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Xcode非开发者账号真机调试——权限问题脱坑手册</title>
      <link href="/2018/08/24/Xcode%E9%9D%9E%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E2%80%94%E2%80%94%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98%E8%84%B1%E5%9D%91%E6%89%8B%E5%86%8C/"/>
      <url>/2018/08/24/Xcode%E9%9D%9E%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E2%80%94%E2%80%94%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98%E8%84%B1%E5%9D%91%E6%89%8B%E5%86%8C/</url>
      <content type="html"><![CDATA[<p>非开发者证书因权限问题，需要关闭Push Notifications、Associated Domains等权限才能真机调试。本文提供关于权限问题的统一解决方案。<br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Xcode 7.2开始，苹果支持非开发者账号真机调试。关于如何使用，参考旧文<a href="https://xjkstar.github.io/2018/05/24/Xcode%E9%9D%9E%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E6%95%99%E7%A8%8B/">《[iOS]Xcode非开发者账号真机调试教程》</a>。<br>但从Xcode 8.2 开始出现一些问题，非开发者证书因权限问题，需要关闭Push Notifications、Associated Domains等权限才能真机调试。当时旧文中提供修改.xcodeproj的方法解决。但到了Xcode 9.4.2不生效了。本文提供关于权限问题的统一解决方案</p><h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>在Xcode 9.4.2，非开发者证书被隐藏了13项capabilities，见下图底部文案<br><img src="1.png" alt="1.png"></p><p>经过长期、反复折磨，偶然发现证书选None时，所有capabilities都入口展示了，然后修改某个capabilities时，会弹窗选择一个证书。用此方法，可以关闭所有权限。</p><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p>开启非开发者账号真机调试，参考旧文<a href="https://xjkstar.github.io/2018/05/24/Xcode%E9%9D%9E%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E6%95%99%E7%A8%8B/">《[iOS]Xcode非开发者账号真机调试教程》</a>。</p><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p>选择非开发者证书（图中的team:<a href="mailto:xjk_001@163.com" target="_blank" rel="noopener">xjk_001@163.com</a>，本人邮箱）后，如图报错，因为没有Push Notifications、Associated Domains权限，此时切到capabilities看不到Push Notifications、Associated Domains入口，参见图1</p><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p>回到General，Team选择None，再切回capabilities，此时所有capabilities都展示了<br><img src="2.png" alt="2.png"></p><h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h2><p>选择要关掉的capabilities，xcode弹窗让选择证书，此时选非开发者证书，可以关掉了<br><img src="3.png" alt="3.png"></p><h2 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h2><p>循环以上方法，解决所有capabilities问题</p>]]></content>
      
      <categories>
          
          <category> Xcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xcode </tag>
            
            <tag> 真机调试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS包大小瘦身-Asset Catalog</title>
      <link href="/2018/08/02/iOS%E5%8C%85%E5%A4%A7%E5%B0%8F%E7%98%A6%E8%BA%AB-Asset%20Catalog/"/>
      <url>/2018/08/02/iOS%E5%8C%85%E5%A4%A7%E5%B0%8F%E7%98%A6%E8%BA%AB-Asset%20Catalog/</url>
      <content type="html"><![CDATA[<p>通过Assert Catalog进行iOS包大小瘦身的原理及最优效果<br><a id="more"></a></p><h2 id="Asset-Catalog"><a href="#Asset-Catalog" class="headerlink" title="Asset Catalog"></a>Asset Catalog</h2><p>Asset Catalog是 iOS7 开始支持的图片资源管理方案，将分散在项目中大大小小的图片资源进行统一存放和集中管理。</p><h2 id="瘦身原理"><a href="#瘦身原理" class="headerlink" title="瘦身原理"></a>瘦身原理</h2><ol><li>通过Asset图片管理的1x、2x、3x图，iPhone X、各种plus机型的安装包只包含3x图，iPhone 8、7、6等机型的安装包只包含2x图，因此节省了图片资源大小（前提是开启BitCode，但是谁开了呢！！！）</li><li>文件对齐，Asset方案将众多的文件打包到一个大文件中，减少文件数量，可减少每个文件的簇对齐导致的磁盘浪费（一个扇区512字节，一般一个簇单元有8个扇区，所以文件磁盘大小至少4K。比如，1字节的数据存在文件中，也是要占4K的磁盘大小）</li></ol><h2 id="实践方案"><a href="#实践方案" class="headerlink" title="实践方案"></a>实践方案</h2><p>因公司App已存许久，且业务较多，让各个业务做Asset成本较高，所以做了个打包脚本统一处理。<br>脚本扫描各bundle中 size&lt;2k 的png、jpg的文件，然后将找到的文件move到主工程Assets.xcassets中，存储路径还是xxx.bundle/xxxxx，并开启Provides Namespace。<br>最后这些assets只会生成一个assets.car文件。</p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>以一个76MB的APP（BitCode=NO）为例，实践以上Asset方案后，减小包大小3MB+，效果显著。</p><h2 id="脱坑指南"><a href="#脱坑指南" class="headerlink" title="脱坑指南"></a>脱坑指南</h2><p>在实践中，使用Asset时需要注意的坑s：</p><ol><li>只能使用[UIImage imageNamed:]加载图片，否则返回nil</li><li>建议开启Provides Namespace（可用脚本开启）。该操作是为无缝支持[UIImage imageNamed:@”xxx.bundle/xxx”]调用方式，因为Asset的key恰好与相对路径访问的字符串一样，业务就不需要额外改动</li><li>imageNamed参数命名。接口中字符串不带绝对路径的前缀：/xxx/AlipayWallet.app/，接口中字符串不带后缀：@2x.png、@3x.jpg</li><li>线程确认。必须确认在主线程调用[UIImage imageNamed:@”xxx.bundle/xxx”]。在iOS8以下[UIImage imageNamed:]方法不保证线程安全，iOS 8、iOS 10各有一个小版本也不保证线程安全，所以……线程确认吧</li><li>图片变大。这是一个推测。一般framework中的图片是压缩过的，但当图片移入Asset时会被反压缩<a href="https://techblog.toutiao.com/2018/06/04/gan-huo-jin-ri-tou-tiao-iosduan-an-zhuang-bao-da-xiao-you-hua-si-lu-yu-shi-jian/" target="_blank" rel="noopener">（在头条也有类似推论）</a>。解析ipa包中assets.car文件，对比framework原图片，每个图片都变大了，但无法排除assets.car解析工具原因（PS.试过3个工具都一样）。所以假设图片会变大，那么只将 size&lt;2k (3k、4k都可以，设个让文件对齐功能效果最佳的阈值)的图片进行asset，在Appstore验证后果然安装包更小，所以初步验证推论成立</li></ol><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>BitCode=NO的前提下，最大化Asset减包效果的方案是size向4k的倍数对齐。<br><br><br>比如4.1K的文件Asset后，可能变大为4.9K，按8K对齐算，4.1K文件实际-3.1K（8-4.9）；<br><br>又比如7.6K的文件Asset后，可能变大为8.7K，超过下个对齐阈8K，7.6K文件实际+1.1K（8.7-7.6）。<br><br><code>下个文件对齐的阈值 - 当前文件的大小 = 优化size</code><br><br><code>Asset后文件反压缩的大小 - 当前文件的大小 = 膨胀size</code><br><br><code>膨胀size - 优化size &lt; 0</code> 时才有Asset价值。<br><br>但<code>Asset后文件反压缩的大小</code>在build阶段无法得到，或许假设一个magic number， <code>magic number = Asset后文件反压缩的大小 / 当前文件的大小</code> 是个估算方案吧。</p>]]></content>
      
      <categories>
          
          <category> 包大小 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS包大小 </tag>
            
            <tag> Asset Catalog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Xcode非开发者账号真机调试教程</title>
      <link href="/2018/05/24/Xcode%E9%9D%9E%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E6%95%99%E7%A8%8B/"/>
      <url>/2018/05/24/Xcode%E9%9D%9E%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>对于Xcode7或更高版本，Xcode支持非开发者账号真机调试教程<br><a id="more"></a><br>RT。正文开始。</p><h3 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h3><p>首先得有Apple ID、Xcode7或更高版本</p><h3 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h3><p>打开Xcode个人偏好，添加Apple ID<br><img src="01.jpeg" alt="EC00CCD2_DF55_4167_8D4E_658AFA344200_"></p><h3 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h3><p>选中添加的账号，打开View Details<br><img src="02.jpeg" alt="94D1D254_D1D4_4AD7_910E_CC0AF78255D4"></p><h3 id="4、"><a href="#4、" class="headerlink" title="4、"></a>4、</h3><p>创建调试签名，对iOS Development点击Create，至此Xcode配置完成<br><img src="03.jpeg" alt="8C4BCF36_9350_4F00_B51C_FBDE2A92DCA3"></p><h3 id="5、"><a href="#5、" class="headerlink" title="5、"></a>5、</h3><p>连接iPhone设备，打开一个工程</p><h3 id="6、"><a href="#6、" class="headerlink" title="6、"></a>6、</h3><p>查看Build Settings，<br>确保code signing Entitlements为空，<br>Code signing Identity选择iOS Developer，<br>Provisioning Profile选择Automatic<br><img src="04.jpeg" alt="1B024716_B12F_49A1_B782_E63E274D7E22"></p><h3 id="7、"><a href="#7、" class="headerlink" title="7、"></a>7、</h3><p>调试设备选择插入的iPhone，<br>查看General，<br>修改下Bundle Identifier的内容，例如加个后缀，确保改值未被其他账户使用过，<br>Team选择刚添加的账号，<br>然后开始Fix issue（如果没有黄色警告，可以直接run）<br><img src="05.jpeg" alt="866B3C13_2553_4CA5_A8F5_F70B503E59A4"></p><h3 id="8、"><a href="#8、" class="headerlink" title="8、"></a>8、</h3><p>fix的过程比较久，如果超时了，重试fix。<br>成功后，黄色警告消失。此时可以run了<br><img src="06.jpeg" alt="67E1FD70_A2D2_402A_B4D1_451C090527F5"></p><h3 id="9、"><a href="#9、" class="headerlink" title="9、"></a>9、</h3><p>iOS9 或更高版本，第一次run可能会报错，<br>此时可以看到iPhone里已有demo，证书信任下<br><img src="07.jpeg" alt="FEFA012F_95C6_4455_BB34_A99E20129A70"><br><img src="08.jpeg" alt="Evernote_Camera_Roll_20151209_200232"></p><h3 id="10、"><a href="#10、" class="headerlink" title="10、"></a>10、</h3><p>Congratulations!Final Complete！Mission All~Over!</p><h3 id="11、"><a href="#11、" class="headerlink" title="11、"></a>11、</h3><p>针对xcode 8.2级以上版本，有时遇到如下报错<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The <span class="string">'Apple Push Notification'</span> feature <span class="keyword">is</span> <span class="keyword">only</span> available <span class="keyword">to</span> users enrolled in Apple Developer Program. Please visit http<span class="variable">s:</span>//developer.apple.<span class="keyword">com</span>/programs/ <span class="keyword">to</span> enroll.</span><br></pre></td></tr></table></figure></p><p>老版本可以在Capabilities直接关掉Push，8.2开始，界面上没有这个开关了，但配置还在。此时需要手工编辑xproject。<br>打开工程目录下：/Pods/Portal/Portal/Portal.xcodeproj，右键“显示包内容”，打开project.pbxproj，搜索关键词“com.apple.Push”，看见如下内容：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.apple.Push = &#123;</span><br><span class="line">    enabled = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>修改enabled = 0，保存，退出，run～</p>]]></content>
      
      <categories>
          
          <category> Xcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xcode </tag>
            
            <tag> 真机调试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决Xcode的Instruments无法找到DSYM文件问题</title>
      <link href="/2018/05/24/%E8%A7%A3%E5%86%B3Xcode%E7%9A%84Instruments%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0DSYM%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98/"/>
      <url>/2018/05/24/%E8%A7%A3%E5%86%B3Xcode%E7%9A%84Instruments%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0DSYM%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>都知道Instruments是神器，但要用的时候发现，跟别人看到的数据不一样。<br>别人看到的是各种类名、方法名<br>自己看到的只有十六进制地址<br>Instruments找不到调试符号表DSYM？一脸懵逼！<br><a id="more"></a></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>都知道Instruments是神器，但要用的时候发现，跟别人看到的数据不一样。<br>别人看到的是各种类名、方法名<br>自己看到的只有十六进制地址<br>Instruments找不到调试符号表DSYM？一脸懵逼！<br><img src="01.png" alt="_2016_10_20_4_27_48"></p><h1 id="DSYM"><a href="#DSYM" class="headerlink" title="DSYM"></a>DSYM</h1><p>什么是DWARF，他与熟悉的dSYM文件什么关系？查了一下。 </p><p>DWARF与dSYM的关系是，DWARF是文件格式，而dSYM往往指一个单独的文件。在Xcode中如果不做特殊制定，debug information是被保存在executable文件中，可以使用dsymutil从executable中提取dSYM文件。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>问题是找不到DSYM文件，所以解决步骤分2步：</p><ol><li>人肉找</li><li>找到后，告诉Instruments</li></ol><h2 id="Xcode部分"><a href="#Xcode部分" class="headerlink" title="Xcode部分"></a>Xcode部分</h2><ol><li>定位到build settings-build option-Debug Information Format，设为<code>DWARF with dSYM File</code><br><img src="02.png" alt="_"></li><li>清理工程Clean Product (快捷键Shift + Command + K)</li><li>创建工程Build Product (快捷键Command + B)</li><li>在编译日志中找到刚刚生产的dsym文件路径，推荐在右上角输入关键字<code>dsym</code>过滤信息<br><img src="03.png" alt="_"><br>点开后看到路径<br><img src="04.png" alt="_"><br>一般路径格式：<code>/Users/YourUserName/Library/Developer/Xcode/DerivedData/YourProjectName/Build/Products/&lt;mode&gt;-iOS/YourProjectName.app.dSYM</code></li></ol><h2 id="Instruments部分"><a href="#Instruments部分" class="headerlink" title="Instruments部分"></a>Instruments部分</h2><ol><li>偏好设置中，设置DSYM文件所在文件夹，可以设置多个，比如Debug、Release2个路径<br><img src="05.png" alt="_"></li><li>好了，试一试。如果还没有符号信息，没关系，继续手机操作，然后终止</li><li>打开Instruments-File-Symbols，展开你的工程，选中后设置下<code>dSYM Path</code>。再回头看刚才的记录数据，都有符号信息了。</li></ol><p><img src="06.png" alt="_"></p>]]></content>
      
      <categories>
          
          <category> Xcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xcode </tag>
            
            <tag> Instruments </tag>
            
            <tag> DSYM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GitHub &amp; GitLab ssh并存</title>
      <link href="/2018/05/24/GitHub-GitLab-ssh%E5%B9%B6%E5%AD%98/"/>
      <url>/2018/05/24/GitHub-GitLab-ssh%E5%B9%B6%E5%AD%98/</url>
      <content type="html"><![CDATA[<p>解决GitHub、GitLab的SSH冲突问题<br><a id="more"></a></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>一台PC上同时使用GitHub、GitLab提交代码，遇到SSH冲突问题。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>分别生成各自SSH，并通过config配置使用场景。</p><h3 id="1-生成SSH"><a href="#1-生成SSH" class="headerlink" title="1. 生成SSH"></a>1. 生成SSH</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> github<span class="string">'s ssh</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -f ~/.ssh/id_rsa_github -C <span class="string">"yourGitHubEmail@example.com"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> gitlab<span class="string">'s ssh</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -f ~/.ssh/id_rsa_gitlab -C <span class="string">"yourGitLab@example.com"</span></span></span><br></pre></td></tr></table></figure><h3 id="2-添加private-key"><a href="#2-添加private-key" class="headerlink" title="2. 添加private key"></a>2. 添加private key</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-<span class="keyword">add</span><span class="bash"> ~/.ssh/id_rsa_github</span></span><br><span class="line"><span class="bash">$ ssh-add ~/.ssh/id_rsa_gitlab</span></span><br></pre></td></tr></table></figure><h3 id="3-上传public-key"><a href="#3-上传public-key" class="headerlink" title="3. 上传public key"></a>3. 上传public key</h3><p>在github、gitlab中分别输入对应的~/.ssh/id_isa_gitXXX.pub内容</p><h3 id="4-修改配置"><a href="#4-修改配置" class="headerlink" title="4. 修改配置"></a>4. 修改配置</h3><p>打开config</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span> ~/.ssh/<span class="built_in">config</span></span><br></pre></td></tr></table></figure><p>增加以下内容</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#gitlab</span><br><span class="line">Host gitlab</span><br><span class="line">        HostName gitlab.*.com</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa_gitlab</span><br><span class="line"></span><br><span class="line">#github</span><br><span class="line">Host github</span><br><span class="line">        HostName github.com</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure><h3 id="5-验证"><a href="#5-验证" class="headerlink" title="5. 验证"></a>5. 验证</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试github</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh -T yourGitHubEmail@example.com</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试gitlab</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh -T yourGitLab@example.com</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> github </tag>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HEXO 常用指令</title>
      <link href="/2018/05/22/HEXO-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/05/22/HEXO-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>HEXO 常用指令 &amp; 简单创建<br><a id="more"></a></p><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><ul><li>地址  </li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>//hexo.io/<span class="built_in">zh</span>-cn/</span><br></pre></td></tr></table></figure><h3 id="初始化工程"><a href="#初始化工程" class="headerlink" title="初始化工程"></a>初始化工程</h3><ul><li>初始化</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo init MyBlog</span></span><br></pre></td></tr></table></figure><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><ul><li>安装hexo server：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm <span class="keyword">install</span> hexo-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><ul><li>生成静态页面：</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br></pre></td></tr></table></figure><ul><li>打开hexo本地服务(指定端口5000，默认4000)：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo<span class="built_in"> server </span>-p 5000</span><br></pre></td></tr></table></figure><h3 id="git部署"><a href="#git部署" class="headerlink" title="git部署"></a>git部署</h3><ul><li>安装hexo的git部署：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><ul><li>生成静态页面并部署到github：</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g（或hexo g + hexo <span class="keyword">deploy</span>）</span><br></pre></td></tr></table></figure><h3 id="写新文章"><a href="#写新文章" class="headerlink" title="写新文章"></a>写新文章</h3><ul><li>新文章：</li></ul><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="引用本地资源"><a href="#引用本地资源" class="headerlink" title="引用本地资源"></a>引用本地资源</h3><ul><li><p>安装插件：</p>  <figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-<span class="built_in">image</span> --<span class="built_in">save</span></span><br></pre></td></tr></table></figure></li><li><p>在_config.yml中修改设置：</p></li></ul><pre><code><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></code></pre><ul><li>在abcd.md文章中引用：</li></ul><pre><code><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">你想输入的替代文字</span>](<span class="link">abcd/图片名.jpg</span>)</span><br></pre></td></tr></table></figure></code></pre><h3 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h3><ul><li>安装插件：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></span><br></pre></td></tr></table></figure><ul><li>修改_config.yml：</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">    <span class="keyword">type</span>: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    limit: <span class="number">20</span></span><br></pre></td></tr></table></figure><h3 id="搜索引擎收录"><a href="#搜索引擎收录" class="headerlink" title="搜索引擎收录"></a>搜索引擎收录</h3><ul><li>安装插件：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></span><br></pre></td></tr></table></figure><ul><li>修改_config.yml：</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sitemap:</span></span><br><span class="line"><span class="symbol">    path:</span> sitemap.xml</span><br></pre></td></tr></table></figure><h3 id="百度搜索引擎收录"><a href="#百度搜索引擎收录" class="headerlink" title="百度搜索引擎收录"></a>百度搜索引擎收录</h3><ul><li>安装插件：</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install </span>hexo-generator-<span class="keyword">baidu-sitemap </span>--save</span><br></pre></td></tr></table></figure><ul><li>修改_config.yml：</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">baidusitemap:</span></span><br><span class="line"><span class="symbol">    path:</span> baidusitemap.xml</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 效率工具 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
